前情回顾
1. tcp传输特征
   * 传输中接收和发送特征
   * 网络缓冲区
   * 粘包

2. UDP传输
   服务端  创建套接字 --> 绑定地址-->发送接收-->关闭
   客户端  创建套接字-->收发消息 --> 关闭

3. 套接字属性
   fileno()
   getpeername()
   setsockopt()

4. 广播

5. HTTP协议
   * 网页获取过程
   * http请求
        格式 :  请求行  请求头 空行 请求体
	请求行:  GET   /    HTTP/1.1 
	  主页: index.html
   * http响应
        格式 ： 响应行  响应头 空行 响应体
	响应行: HTTP/1.1  200  OK
****************************************************

IO  (input  output)

在内存中存在数据交互的操作认为是IO操作

和终端交互 : input  print
和磁盘交互 : read   write
和网络交互 : recv   send

IO密集型程序: 在程序执行中有大量IO操作,而较少的cpu运               算.消耗cpu少,效率低,耗时长

计算密集型程序 : 在程序运行中,IO操作较少,cpu计算较                    多,cpu消耗大,运行速度快


IO模型

阻塞IO  非阻塞IO  IO多路复用   事件IO   异步IO ...


阻塞IO

    阻塞IO是IO的默认形态,是效率很低的一种IO

    阻塞情况:
    * 因为某种条件没有达成造成的函数阻塞
      e.g.  accept   input  recv
    
    * 处理IO的时间较长产生的阻塞行为
      e.g.  网络延迟,大文件的读写


非阻塞IO
     
    将原本阻塞的函数通过属性的设置改变阻塞行为,变为非阻塞

    sockfd.setblocking(bool)
    功能: 设置套接字为非阻塞IO 
    参数: 默认True 表示套接字调用阻塞函数时为阻塞状态
          设置为False则表示非阻塞状态


    超时检测,即设置一个最长阻塞等待时间,超时后即不再阻塞
     
    sockfd.settimeout(sec)
    功能:设置套接字超时时间
    参数: 设置的时间, 秒

    * 超时检测不能和非阻塞通用,否则超时没有意义


IO多路复用

定义:  同时监控多个IO事件,选择其中能够执行的IO进行IO事件处理. 以此形成可以同时操作多个IO的行为模式,避免一个IO阻塞造成其他IO均无法执行的情况.

IO事件就绪 : IO已经发生,内核需要交给应用程序处理

具体方法:
    import select

    select : windows   linux   unix
    poll : linux   unix
    epoll : linux 


select 方法

   rs,ws,xs=select(rlist, wlist, xlist[, timeout])
   功能: 监控IO事件,阻塞等待IO事件发生
   参数: rlist  列表  存放需要等待条件发生的IO事件
         wlist  列表  存放需要主动处理的IO事件
	 xlist  列表  当发生异常你需要处理的IO事件
         timeout  超时时间

   返回值: rs  列表  rlist中准备就绪的IO
           ws  列表  wlist中准备就绪的IO
	   xs  列表  xlist中准备就绪的IO

注意 : 1. IO多路复用占用计算机资源较少,效率较高
       2. wlist 中如果有IO则select立即返回处理
       3. 在IO处理过程中不要出现死循环,影响IO 监控


位运算

& 按位与
| 按位或
^ 按位异或
<< 左移
>> 右移

11      1011
14      1110

11&14   1010  一0则0
11|14   1111  一1则1
11^14   0101  相同为0不同为1

11<<2   101100   向左移动右侧补0 
14>>2   11       向右移动去掉低位


poll方法

p = select.poll()
功能 : 创建poll对象
返回值: poll对象

p.register(fd,event)
功能 : 注册要关注的IO
参数 : fd 要关注的IO对象
       event  要关注的事件
              常用事件类型: POLLIN   读IO rlist
	                    POLLOUT  写IO  wlist
                            POLLERR  出错IO xlist
			    POLLHUP  断开连接事件

      e.g.   p.register(sockfd,POLLIN|POLLERR)

p.unregister(fd)
功能: 取消关注的IO
参数: IO对象或者文件描述符

events = p.poll()
功能 : 阻塞监控IO事件发生
返回值 : events 是一个列表
         [(fileno,event),()....]
	 每个就绪IO对应一个元组,元组中为该IO的fileno和就绪事件

* 返回值中没有IO对象,所以通过fileno配合IO对象字典查   找
  {fileno:io_obj}


poll_server步骤
1. 创建套接字
2. 设置套接字为关注
3. 建立fileno查找字典
4. 循环监控IO
5. 处理发生的IO


作业 :  熟练io模型特点
        熟悉io多路复用原理
	熟练 select  和 poll
	复习 类的使用  __init__ 继承  super
