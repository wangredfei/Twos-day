前情回顾

1. multiprocessing模块 
      创建进程 : Process(target,args,kwargs)
                 start()
		 join()
      进程对象属性 : p.name   p.pid  p.daemon                         p.is_alive()

      自定义进程类 :  继承Process  重写run方法

      进程池 : 大量进程事件需要处理,此时进程池可以避          免频繁创建进程带来的系统消耗.

           Pool()  创建进程池对象
	   apply_async(func,args,kwds)  放入进程池事件
           close() 关闭进程池
	   join()  回收进程池
	   map()  使用迭代对象为指定函数传参后加入进        程池

2.进程间通信

  管道 : Pipe()  fd.recv()   fd.send()

  消息队列 :  Queue()   q.get()  q.put()
              q.full()  q.empty()  q.qsize() q.close()
******************************************************

共享内存

通信原理: 在内存中开辟一个区域,对多进程可见,进程可以           写入内容或读取内容,但是每次写入的内容都会            覆盖之前的

from multiprocessing import  Value,Array

obj = Value(ctype,data)
功能 : 开辟共享内存
参数 : ctype : 字符串 表示共享内存中的数据类型
	
	    常用格式: int-->'i'
		      float --> 'f'
		      char(bytes) ---> 'c'

       data : 初始化存入数据

obj.value 属性 即共享内存中的值.对该属性的读取和修改                即修改共享内存
          

obj = Array(ctype,obj)
功能 : 创建共享内存
参数 : ctype  要存储的数据类型
       obj  列表(字符串)  表示共享内存中初始数据
            数字  空间结构的大小
返回值 : 共享内存对象

* 可以通过循环遍历或者[]序列号方式获取共享内存值,或   改写共享内存值
* 如果共享内存中是字节串,可以通过 obj.value 获取该字   串

           管道        消息队列         共享内存

开辟空间   内存        内存             内存

读写方式   两端读写    先进先出         覆盖之前内容

效率       一般         一般            较高

使用特点   多用于父子  第三方库较多     操作需要注意
           进程                          争夺内存资源

信号量(信号灯)

原理 : 给定一个数量,对多个进程可见.多个进程可以通过方        法操作这个数量,达到协同工作的目的

from multiprocessing import Semaphore

sem = Semaphore(num)
功能: 创建信号量
参数: 初始化信号量
返回值 : 信号量对象

sem.acquire()  
功能 : 将消耗一个信号量,当信号量为0会阻塞

sem.release()
功能 : 增加一个信号量资源

sem.get_value()
功能 : 获取信号量资源数量


多任务编程之 线程 (Thread)

    什么是线程?
        1. 线程也是多任务编程方法
	2. 线程也可以使用计算机多核资源
	3. 线程被称为轻量级的进程,也是运行状态的概念
	4. 一个进程中可以包含多个线程,线程是进程的一    部分
	5. 线程是系统分配内核的最小单位
    
    线程特征
        1. 线程也是运行状态,有生命周期,消耗计算机资    源
        2. 多个线程之间独立运行互不干扰
	3. 一个进程内的线程共享进程资源
	4. 线程的创建删除消耗的系统资源远远小于进程
	5. 线程也有自己独立的资源,栈空间,命令集,ID等


threading 模块创建线程

from threading import Thread 

t = Thread()
功能 : 创建线程对象
参数 : target  绑定线程函数
       args  元组  给线程函数传参
       kwargs  字典  给线程函数传参
       name   线程名  默认 Thread-1

t.start()  启动线程,自动运行线程函数
t.join([timeout]) 阻塞等待回收线程


线程对象属性

t.name   线程名称
t.setName()  设置名称
t.getName()  获取名称

t.is_alive()  线程状态
threading.currentThread()   获取当前线程对象

t.daemon   默认为False此时主线程退出分支线程继续执行
           如果设置为True则主线程退出分支线程也结束执行
t.setDaemon(True)  设置daemon属性
t.isDaemon()  查看daemon属性

* 在start前设置,通常不和join() 同用


自定义线程类

    步骤:
          1. 继承 Thread 类
	  2. 添加自己的属性__init__,加载父类__init__
	  3. 重写run
	  4. 使用自己的类生成线程对象.调用start()会自    动以一个线程执行run


线程的通信 

    通信方法 :使用进程空间中的全局变量通信

    注意事项 : 共享资源争夺,往往需要同步互斥机制协调


线程同步互斥
    
    共享资源(临界资源): 多个线程都可以操作的资源称为                      共享资源
    临界区 : 指一段代码,对临界资源操作的代码段

    同步: 同步是一种合作关系,为完成任务,多个进程或者       线程之间形成一种协调调度,按照必要的步骤有       序执行一系列操作

    互斥: 互斥是一种制约关系,当一个进程或者线程使用       临界资源时会进行加锁处理,此时另一个进程或       者线程就无法操作,直到解锁后才能操作

线程同步互斥方法

    线程 Event

    from threading import Event

    e = Event() 
    功能 : 创建事件对象 (事件对象初始为未设置状态)

    e.wait([timeout])
    功能 : 如果e是未设置的状态则阻塞
           如果e 是被设置状态则不阻塞
    参数 : timeout  超时时间

    e.set()  将e变为被设置状态

    e.clear()  清除e的设置
 
    e.is_set()  判断当前e的状态 设置-->True 
                                未设置--> False

   
    线程锁 Lock

    from threading import Lock

    lock = Lock()  创建锁对象

    lock.acquire() 上锁, 如果已经上锁调用该函数阻塞
    lock.release() 解锁

    with  lock:    上锁
       ...
       ...
                   with代码段结束则解锁


python 线程的GIL问题 (全局解释器锁)

GIL : 由于Python解释器中加入了全局解释器锁,导致           python解释器同一时刻只能解释一个线程,所以大大       降低了Python多线程的执行效率.

后果 : Python线程一般只能用在大量IO阻塞存在,或则高延       迟的IO程序中.遇到阻塞,线程会自动让出解释器.而       在cpu密集型程序中,Python线程效率低下

GIL问题建议:
   * 尽量使用多进程完成并发
   * 不使用c作为解释器情况没有GIL问题  java  c#
   * 使用多种阻塞方案完成并发


测试

Line cpu: 8.797621726989746
Line IO: 5.032757759094238

Thread cpu: 8.930429458618164
Thread IO: 5.855912685394287

Process cpu: 4.457605838775635
Process io: 3.3356571197509766

作业 : 

1. 多进程和多线程的编程特点及区别
2. 复习网络套接字使用
3. 编码思路流程



